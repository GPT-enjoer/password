#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <limits>
#include <iomanip>
#include <sstream>
#include <chrono>
#include <cstdint>
#include <cmath>
#include <random>
#include <sodium.h>
#include <map>
#include <curl/curl.h>
#include <nlohmann/json.hpp>
#include <cryptopp/osrng.h>
#include <cryptopp/hex.h>
#include <cryptopp/filters.h>
#include <cryptopp/aes.h>
#include <cryptopp/modes.h>
#include <cryptopp/sha.h>

using namespace std;
using json = nlohmann::json;

// Инициализация библиотек
void initializeCryptoLibraries() {
    if (sodium_init() < 0) {
        throw runtime_error("libsodium initialization failed");
    }
    curl_global_init(CURL_GLOBAL_DEFAULT);
}

// Вычисление SHA-1 хеша
string computeSHA1(const string& input) {
    CryptoPP::SHA1 hash;
    string digest;
    CryptoPP::StringSource ss(input, true,
        new CryptoPP::HashFilter(hash,
            new CryptoPP::HexEncoder(
                new CryptoPP::StringSink(digest))));
    return digest;
}

vector<uint8_t> getCryptographicallyRandomBytes(size_t numBytes) {
    vector<uint8_t> randomBytes(numBytes);
    randombytes_buf(randomBytes.data(), numBytes);
    return randomBytes;
}

string bytesToUniformChars(const vector<uint8_t>& bytes, const string& charset) {
    if (charset.empty()) throw runtime_error("CharSet is empty");
    const size_t charSetSize = charset.size();
    string result;
    CryptoPP::AutoSeededRandomPool prng;

    for (size_t i = 0; i < bytes.size(); ++i) {
        const uint8_t r = bytes[i];
        result += charset[r % charSetSize];
    }
    
    if (result.empty()) throw runtime_error("Failed to generate uniform chars");
    return result;
}

string generateStrongPassword(int length, const string& charset) {
    if (length <= 0) throw runtime_error("Password length must be positive");
    if (charset.size() < 2) throw runtime_error("Charset too small");

    const size_t requiredBytes = max(static_cast<size_t>(length), sizeof(uint32_t));
    vector<uint8_t> randomBytes;
    string password;
    
    for (int attempts = 0; attempts < 100; ++attempts) {
        randomBytes = getCryptographicallyRandomBytes(requiredBytes);
        password = bytesToUniformChars(randomBytes, charset);
        if (password.length() >= static_cast<size_t>(length)) break;
    }
    
    if (password.length() < static_cast<size_t>(length)) {
        throw runtime_error("Failed to generate password after 100 attempts");
    }
    return password.substr(0, length);
}

string addSeparators(const string& password, const string& separator, int groupSize) {
    if (groupSize <= 0) throw runtime_error("Group size must be positive");
    if (password.empty()) return "";

    string result;
    const int sepLength = separator.length();
    const int totalLength = password.length() + ((password.length() / groupSize) - 1) * sepLength;
    result.reserve(totalLength);

    for (size_t i = 0; i < password.length(); ++i) {
        result += password[i];
        if ((i + 1) % groupSize == 0 && (i + 1) != password.length()) {
            result += separator;
        }
    }
    return result;
}

int checkPasswordStrength(const string& password, double& entropy, double& timeToCrack) {
    if (password.empty()) return 1;
    
    bool hasLower = false, hasUpper = false, hasDigit = false, hasSpecial = false;
    const string specialChars = "!@#$%^&*()_+~`|}{[]\\:;\"'<>?,./-=";
    int charSetSize = 0;

    for (char c : password) {
        if (islower(c)) hasLower = true;
        else if (isupper(c)) hasUpper = true;
        else if (isdigit(c)) hasDigit = true;
        else if (specialChars.find(c) != string::npos) hasSpecial = true;
    }

    if (hasLower) charSetSize += 26;
    if (hasUpper) charSetSize += 26;
    if (hasDigit) charSetSize += 10;
    if (hasSpecial) charSetSize += specialChars.length();
    if (charSetSize == 0) charSetSize = 1;

    int score = 0;
    if (hasLower) score++;
    if (hasUpper) score++;
    if (hasDigit) score++;
    if (hasSpecial) score++;

    if (password.length() >= 24) score += 2;
    else if (password.length() >= 16) score++;
    
    entropy = password.length() * log2(charSetSize);
    constexpr double attemptsPerSecond = 1e10;
    timeToCrack = pow(2, entropy) / attemptsPerSecond;

    if (entropy > 128) return 5;
    if (entropy > 64) return 4;
    if (entropy > 48) return 3;
    if (entropy > 32) return 2;
    return 1;
}

enum class PasswordOptions : uint32_t {
    OPT_LOWERCASE    = 1 << 0,
    OPT_UPPERCASE    = 1 << 1,
    OPT_DIGITS       = 1 << 2,
    OPT_SPECIAL      = 1 << 3,
    OPT_NO_DIGITS    = 1 << 4,
    OPT_SEPARATORS   = 1 << 5,
    OPT_AVOID_SIMILAR= 1 << 6,
    OPT_NO_REPEAT    = 1 << 7,
    OPT_RANDOM_CASE  = 1 << 8,
    OPT_CUSTOM_CHARSET=1 << 9,
    OPT_LANGUAGE_SPEC=1 << 10
};

string generatePasswordWithOptions(int length, uint32_t options, 
                                 const string& separator = "-", int groupSize = 4,
                                 const string& customCharset = "",
                                 const string& languageCharset = "") {
    string charset;

    if (options & PasswordOptions::OPT_CUSTOM_CHARSET && !customCharset.empty()) {
        charset = customCharset;
    } else if (options & PasswordOptions::OPT_LANGUAGE_SPEC && !languageCharset.empty()) {
        charset = languageCharset;
    } else {
        if (options & PasswordOptions::OPT_LOWERCASE) 
            charset += "abcdefghijkmnopqrstuvwxyz"; // Исключаем l
        if (options & PasswordOptions::OPT_UPPERCASE) 
            charset += "ABCDEFGHJKLMNPQRSTUVWXYZ"; // Исключаем I, O
        if (options & PasswordOptions::OPT_DIGITS) 
            charset += "23456789"; // Исключаем 0,1
        if (options & PasswordOptions::OPT_SPECIAL) 
            charset += "!@#$%^&*()_+~`?><}{[]";
    }

    if (options & PasswordOptions::OPT_NO_DIGITS) {
        charset.erase(remove_if(charset.begin(), charset.end(), ::isdigit), charset.end());
    }

    if (options & PasswordOptions::OPT_AVOID_SIMILAR) {
        charset.erase(remove_if(charset.begin(), charset.end(), [](char c) {
            return string("lI10Oo").find(c) != string::npos;
        }), charset.end());
    }

    if (charset.empty()) throw runtime_error("Empty charset after filtering");

    string password = generateStrongPassword(length, charset);

    if (options & PasswordOptions::OPT_RANDOM_CASE) {
        transform(password.begin(), password.end(), password.begin(), [](char c) {
            static auto rng = default_random_engine(random_device{}());
            return (uniform_int_distribution<>(0,1)(rng)) ? toupper(c) : tolower(c);
        });
    }

    if (options & PasswordOptions::OPT_SEPARATORS) {
        password = addSeparators(password, separator, groupSize);
    }

    if (options & PasswordOptions::OPT_NO_REPEAT) {
        string temp;
        for (char c : password) {
            if (temp.find(c) == string::npos) temp += c;
        }
        password = temp.substr(0, length);
    }

    return password;
}

bool isPasswordPwned(const string& password) {
    const string sha1 = computeSHA1(password);
    const string prefix = sha1.substr(0, 5);
    const string suffix = sha1.substr(5);
    
    CURL* curl = curl_easy_init();
    if (!curl) return false;

    string response;
    curl_easy_setopt(curl, CURLOPT_URL, ("https://api.pwnedpasswords.com/range/" + prefix).c_str());
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, [](char* ptr, size_t size, size_t nmemb, string* data) {
        data->append(ptr, size * nmemb);
        return size * nmemb;
    });
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 10L);

    CURLcode res = curl_easy_perform(curl);
    curl_easy_cleanup(curl);
    
    if (res != CURLE_OK) return false;

    istringstream iss(response);
    string line;
    while (getline(iss, line)) {
        if (line.find(suffix) != string::npos) return true;
    }
    return false;
}

int main() {
    initializeCryptoLibraries();
    try {
        // Пример использования
        auto pass = generatePasswordWithOptions(24, 
            static_cast<uint32_t>(PasswordOptions::OPT_LOWERCASE) |
            static_cast<uint32_t>(PasswordOptions::OPT_UPPERCASE) |
            static_cast<uint32_t>(PasswordOptions::OPT_DIGITS),
            "-", 6);
            
        cout << "Generated password: " << pass << endl;
        cout << "Pwned check: " << (isPasswordPwned(pass) ? "YES" : "NO") << endl;
        
    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
    }
    curl_global_cleanup();
    return 0;
}
